응용 프로그램이 필요로 하는 메모리를 얻는 또 다른 방법은 힙을 사용하는 것이다.

힙은 가상 메모리 공간상의 예약된 영역이다.
운영체제는 프로세스를 만들 때 1M 바이트 크기의 디폴트 힙을 같이 생성한다.
힙은 어디까지나 예약된 메모리일 뿐이므로 힙 자체가 물리적인 메모리를 축내지는 않는다.
즉, 최초 힙이 만들어질 때는 1M 바이트 크기만큼 예약만 되어 있을 뿐 확정되어 있지는 않다.


응용 프로그램이 힙으로부터 메모리를 할당하면 운영체제는 필요한 만큼 힙의 영역을 확정하여 물리적 메모리를 할당하므로 꼭 필요한 만큼의 메모리만 사용하는 셈이다.

대충 모양은 다음과 같다.

	|	프로세스의 코드	|	디폴트 힙		|
				
				↓ HeapAlloc

	|	프로세스의 코드	|//////|	디폴트 힙		|


가상 메모리를 직접 할당하는 것에 비해 힙을 사용하는 방법은 작은 메모리 블록을 할당하는데 훨씬 더 유리하다.

가상 메모리는 페이지 단위로 할당되기 때문에 불과 몇 바이트를 할당하더라도 4K바이트의 큰 메모리가 할당되는데 비 해 힙은 요구한 만큼만 할당되므로 훨씬 더 경제적이다.

예를 들어 노드의 크기가 작은(10여 바이트 정도) 연결 리스트의 노드를 계속적으로 확장할 때나 동적으로 배열의 크기를 늘려갈 때 등이 힙을 사용하는 가장 적절한 예이다.

이런 작은 메모리를 할당할 때 가상 메모리와 힙의 차이점을 분명히 테스트해보기 위해 예제를 만들었다.

> AllocTest










VirtualAlloc은 가상 메모리 공간을 64K 단위로 지정하고 메모리 블록 하나를 4K 단위로 읽고 쓴다.

반면, 힙은 딱 필요한만큼만 할당할 수 있고 미리 예약된 메모리이므로 VirtualAlloc과 거의 유사한 기능도 갖추고 있다고 볼 수 있다.

리스트 따위의 작은 용량의 메모리를 할당할 때는 가급적 HeapAlloc이나 malloc같은 힙 할당 함수를 사용해야 한다.









Win32에서는 주소 공간이 분리되어 있으므로 모든 힙은 지역적(Local)이다.
Win16에서는 전역/지역 구분이 있어 힙으로부터 메모리를 할당하는 함수가 Local*, Global* 두 종류였지만 Win32에서는 프로세스별로 주소 공간이 격림됨으로 해서 지역 힙만이 존재한다.

또한 Win32에서는 필요에 따라 다수의 힙을 생성할 수도 있다.
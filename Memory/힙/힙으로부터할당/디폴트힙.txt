프로세스가 만들어지면서 운영체제가 프로세스의 주소 공간에 만드는 1M크기의 힙을 디폴트 힙이라고 한다.

디폴트 힙은 프로세스가 파괴될 때 같이 파괴되므로 실행중에 언제든지 사용할 수 있다.
또, 디폴트 힙 외에 사용자가 직접 힙을 만들어 사용할 수도 있다.


디폴트 힙으로부터 메모리를 할당받을 때는 다음 세 함수를 사용한다.

> HANDLE GetProcessHeap(VOID);
> LPVOID HeapAlloc(HANDLE hHeap, DWORD dwFlags, DWORD dwBytes);
> BOOL HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem);


Win32의 모든 힙 함수는 대상이 되는 힙의 핸들을 첫 번째 인수로 지정한다.

디폴트 힙을 사용할 때는 GetProcessHeap 함수로 디폴트 힙의 핸들을 먼저 얻은 후 이 핸들을 HeapAlloc 등의 함수로 넘겨 할당 대상 힙을 지정한다.

HeapAlloc의 세 번째 인수 dwBytes로 할당하고자 하는 메모리 양을 지정하며 두 번째 인수 dwFlags는 힙을 할당하는 방법을 지정한다.


dwFlags는 다음 세 개의 플래그가 있다.

___________________________________________________________________________________________________
플래그				설명
===============================================================
HEAP_GENERATE_EXCEPTIONS	에러 발생시 NULL을 리턴하지 않고 대신 예외를 발생
				시킨다.
				매번 리턴값을 점검하는 것은 번거로우므로 예외 처리
				구문을 쓰는 것이 더 편리하다.

HEAP_NOSERIALIZE			힙 할당은 스레드에 안전하게 동기화되는데
				이런 동기화를 하지 않는다.

HEAP_ZERO_MEMORY		할당한 힙을 0으로 초기화한다.
				이 플래그를 지정하지 않으면 쓰레기값이 들어있다.
===============================================================




이 플래그들 중 두 번째인 HEAP_NO_SERIALIZE 플래그는 다소 설명이 필요하다.

힙에 대한 액세스는 운영체제에 의해 기본적으로 동기화되며 두 개 이상의 스레드가 동시에 힙에서 메모리를 할당하더라도 우연히 같은 번지를 할당하지 않도록 되어 있다.



시스템이 이런 처리를 하지 않는다면 두 스레드가 같은 번지를 동시에 할당해서 서로 방해할 수 있으므로 이 처리는 꼭 필요하다.

물론 확률 상으로 동시에 같은 번지가 할당될 경우는 극히 드물겠지만 멀티 스레딩 환경에서는 스레드가 동시에 실행되면서 스위칭 시점을 예측할 수 없으므로 이런 가능성을 전혀 배제할 순 없다.



그래서 힙에 대한 모든 처리(할당, 해제, 조사)는 시스템에 의해 동기화된다.

단, 이런 동기화는 한 스레드가 힙을 쓰는 동안 나머지 스레드가 힙을 쓰지 못하게 대기시켜야 하므로 여분의 코드가 더 필요하며, 따라서 비동기화보다 당연히 속도가 더 느리다.

HEAP_NO_SERIALIZE 플래그는 동기화를 금지하여 더 빠른 속도를 얻고자 할 때 사용한다.
스레드가 오직 하나 뿐이라면 굳이 이런 느린 처리를 할 필요가 없는 것이다.




비동기화 상태일 때도 다음 두 함수로 힙을 잠시 잠글 수는 있다.

> BOOL HeapLock(HANDLE hHeap);
> BOOL HeapUnLock(HANDLE hHeap);


스레드가 힙에 대해 락을 걸면 이 힙을 잠시 독점적으로 소유하며 다른 스레드가 건드리지 못하게 한다.
HEAP_NO_SERIALIZE 플래그는 할당할 때 뿐만 아니라 추가 힙을 생성할 때, 해제할 때, 힙을 조사할 때, 재할당할 때 각각 사용되는데 가급적이면 이 플래그는 쓰지 않는 것이 좋다.

당장은 스레드가 하나밖에 없어서 동기화를 할 필요가 없다 하더라도 프로그램이란게 언제 확장될지 알 수 없으므로 가급적이면 동기화를 하는 것이 좋다.


그래서 dwFlags 인수는 통상 0으로 지정한다.


< 예제 >

ptr = (int*)HeapAlloc(GetProcessHeap(), 0, sizeof(int)*10);

for(i=0; i<10; i++){
	wsprintf(str, TEXT("%d"), ptr[i] = i*2);
	TextOut(hdc, 10, i*20, str, lstrlen(str));
}
HeapFree(GetProcessHeap(), 0, ptr);







HeapAlloc으로 메모리를 할당하되 대상이 되는 힙의 핸들을 GetProcessHeap() 함수로 구해 첫 번째 인수로 넘겼다.

다 사용한 후에는 HeapFree 함수로 해제한다.


다음 두 함수는 이미 할당된 힙의 크기를 조정하거나 힙의 크기를 구한다.


> LPVOID HeapReAlloc(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, DWORD dwBytes);
> DWORD HeapSize(HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem);



HeapReAlloc은 C 런타임 라이브러리의 realloc과 동일하며 HeapSize는 _msize 함수와 동일하다.
대상 힙의 핸들을 항상 첫 번째 인수로 전달하고 블록의 번지와 새로운 할당 크기를 지정하면 된다.

HeapSize 함수를 사용하면 할당된 힙의 크기를 실행중에 조사할 수 있으므로 특정 번지의 할당량을 일부러 기억하지 않아도 된다.





다음 세 함수는 힙을 관리하는 함수이다.

> SIZE_T HeapCompact(HANDLE hHeap, DWORD dwFlags);
> BOOL HeapValidate(HANDLE hHeap, DWORD dwFlags, LPCVOID lpMem);
> BOOL HeapWalk(HANDLE hHeap, LPPROCESS_HEAP_ENTRY lpEntry);



힙은 언제든지 할당 및 해제를 할 수 있는 영역이며 할당과 해제를 자주 반복하다 보면 중간에 비는 공간들이 많아질 것이다.
HeapCompact 함수는 힙의 빈 공간을 병합하여 좀 더 큰 여유 공간을 만들고 과다하게 확정된 영역은 확정 해제하여 시스템에 반납한다.


이런 동작을 전문 용어로 컴팩션(Compaction)이라고 하는데 하드 디스크의 조각모음과 유사한 동작을 한다고 생각하면 이해하기 쉽다.


___________________________________________________________________________________________________
				디버깅용 힙 함수

HeapValidate 함수는 lpMem이 지정하는 블록이 유효한 블록인지를 검사한다.
제대로 할당한 블록이라면 물론 유효하겠지만 버그에 의해 이 영역이 잘못 덮여졌다면 그렇지 못할 수도 있는데 이 함수로 블록의 안전성 여부를 점검할 수 있다.

lpMem이 NULL이면 힙 전체의 블록을 점검해보고 이상이 있는지를 조사한다.

만약 이 함수가 FALSE를 리턴한다면 프로그램의 논리에 뭔가 이상이 있다고 볼 수 있다.


===============================================================

HeapWalk 함수는 힙의 모든 블록을 열거한다.
이 함수를 반복적으로 호출하면 힙의 첫 블록부터 마지막 블록까지 순회하면서 다음 구조체에 블록에 대한 정보를 채운다.


typedef struct _PROCESS_HEAP_ENTRY{
	PVOID lpData;
	DWORD cbData;
	BYTE cbOverhead;
	BYTE iRegionIndex;
	WORD wFlags;
	union{
		struct{
			HANDLE hMem;
			DWORD dwReserved[3];
		}Block;
		struct{
			DWORD dwCommittedSize;
			DWORD dwUnCommittedSize;
			LPVOID lpFirstBlock;
			LPVOID lpLastBlock;
		}Region	
	};
}PROCESS_HEAP_ENTRY;


블록을 순회하면서 각 블록의 위치와 크기들을 점검해 보면 어디서 이상이 발생했는지 알 수 있다. 상기 두 함수는 일반적인 용도로 사용한다기보다는 일종의 디버깅용이라고 할 수 있다.

부주의한 덮어 쓰기에 의해 메모리가 깨지면 알 수 없는 곳에서 이상 동작을 할 수 있는데 이 두 함수로 힙의 이상 유무와 어떤 블록이 잘못되었는지 등을 알아낼 수 있다.
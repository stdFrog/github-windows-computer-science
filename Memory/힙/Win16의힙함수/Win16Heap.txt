Win16의 힙 함수

malloc, new 외에 메모리 할당에 사용될 수 있는 함수에는 Global* 함수군, Local* 함수군이 있다.

이 두 함수군은 각각 전역힙과 지역힙에서 메모리를 할당하는 함수들인데 Win32에서는 전역힙과 지역힙의 구분이 없어졌기 때문에 두 함수군의 역할이 동일해졌다.

그래서 Global* 함수를 쓰나 Local* 함수를 쓰나 그 결과가 완전히 동일하므로 보통 Global* 함수만 사용한다.

일단 메모리 할당에 직접적으로 사용되는 다음 네 함수를 보자.

===============================================================

> HGLOBAL GlobalAlloc(UINT uFlags, DWORD dwBytes);
> LPVOID GlobalLock(HGLOBAL hMem);
> BOOL GlobalUnlock(HGLOBAL hMem);
> HGLOBAL GlobalFree(HGLOBAL hMem);

GlobalAlloc 함수가 힙에서 메모리를 할당하는 함수이다.
두 번째 인수 dwBytes로 할당하고자 하는 메모리 양을 바이트 단위로 밝힌다.

첫 번째 인수 uFalgs는 메모리 할당 방법을 지정하며 여러 가지 플래그가 있지만 대부분은 Win32 환경에서 의미가 없고 다음 세 가지 정도의 플래그만 의미가 있다.

___________________________________________________________________________________________________
플래그			설명
===============================================================
GMEM_FIXED		메모리를 할당한 후 할당된 메모리의 포인터를 리턴한다.
			이 플래그를 쓸 경우 GlobalAlloc은 malloc과 거의 유사하며
			리턴된 포인터를 바로 캐스팅해서 쓸 수 있다.

GMEM_MOVEABLE		메모리를 할당한 후 메모리 오브젝트의 핸들을 리턴한다.
			운영체제의 효율적인 메모리 관리를 위해 언제든지
			이 메모리를 이동시킬 수 있도록 고정된 포인터 대신
			메모리 핸들을 리턴한다.

GMEM_ZEROINT		할당된 메모리를 전부 0으로 초기화한다.

GPTR			GMEM_FIXED | GMEM_ZEROINT

GHND			GMEM_MOVEABLE | GMEM_ZEROINT
===============================================================



GMEM_MOVEABLE 플래그로 메모리를 할당하면 이 메모리는 이동 가능한 메모리가 된다.
이동 가능하다는 것은 운영체제가 메모리의 위치를 마음대로 변경할 수 있다는 뜻인데 왜 이런 속성이 필요했는지를 이해하려면 Win16의 메모리 구조에 대한 연구가 필요하다.



응용 프로그램 A,B,C가 각각 3,2,3칸의 메모리를 할당해서 사용한다고 치자.
총 16칸 중 8칸만큼의 여유 공간이 남아 있는 상황에서 D가 4칸 분량의 메모리 할당을 요청했을 때 요청한 용량보다 남은 용량이 더 많으므로 운영체제는 D가 원하는만큼 메모리를 할당해줘야 한다.

그러나, 클러스터에 의해 4칸이 연속적으로 비어 있는 곳이 없다면 어떻게 될까?

이럴 경우를 대비해 운영체제는 B가 차지하고 있는 영역을 다른 곳으로 옮김으로써 4칸이 연속적으로 비도록 만들고 D의 할당 요청을 처리할 수 있어야 한다.


이런 처리를 위해 GMEM_MOVEABLE과 같은 플래그가 Win16 환경에선 사용됐었다.


이동 가능한 메모리는 핸들로써 표현되기 때문에 곧바로 사용할 수 없으며 사용하기 전에 반드시 GlobalLock 함수로 메모리를 고정시키고 포인터를 받아와야 한다.


GlobalLock은 운영체제가 메모리를 어디로 옮겨 놓았는지 실제 번지를 조사하고 당분간 이동시키지 않도록 하는 역할을 한다.


B가 할당한 두 칸의 실제 위치가 옮겨지더라도 B가 이 메모리를 쓸 때는 옮겨진 번지를 받으므로 자신의 메모리를 쓰는데는 아무런 문제가 없다.
===============================================================


락된 상태에서는 이 블록이 고정된 위치에 있으므로 포인터로 안전하게 메모리를 액세스할 수 있다.

액세스가 끝난 후는 GlobalUnlock으로 다시 이동 가능케 해야 운영체제가 메모리를 다시 원하는 대로 관리할 수 있을 것이다.

물론 다시 필요해지면 언제든지 락을 걸 수도 있다.

===============================================================


다 사용한 후에는 GlobalFree 함수로 메모리를 해제한다.

이동 가능하다는 것ㅇ느 필요한 용량만큼을 할당하되 위치는 가변인 채로 내버려 두는 할당 형태이며 고정된 메모리에 비해 사용하기 불편하지만 운영체제가 메모리를 자유롭게 배치할 수 있도록 함으로써 전체 시스템 성능을 향상시킨다.

===============================================================


Win16에서는 왜 이런 플래그들이 필요했는가 하면 운영체제와 응용 프로그램 전체가 하나의 주소 공간에서 실행되었기 때문이다.

그러다 보니 고정된 위치를 할당할 수 없고 이동 가능하도록 해 놓고 필요할 때만 락해서 쓰는 식으로 서로 협조를 해야 했던 것이다.

Win32 환경에서는 프로세스의 주소 공간이 분리되었기 때문에 이런 식으로 할당할 필요없이 자기 주소 공간의 고정된 위치를 마음대로 할당할 수 있게 되었다.

다음 코드는 앞에서 만든 예제를 GlobalAlloc으로 다시 작성한 것이다.

===============================================================

< 예제 >

hMem = GlobalAlloc(GMEM_MOVEABLE, sizeof(int) * 10);
ptr = (int*)GlobalLock(hMem);
for(i=0; i<10; i++){
	wsprintf(str, TEXT("%d"), ptr[i] = i*2);
	TextOut(hdc, 10, i*20, str, lstrlen(str));
}
GlobalUnlock(hMem);
GlobalFree(hMem);


정수형 변수 10개분의 이동 가능한 메모리를 할당한 후 GlobalLock 함수로 고정 시켜 포인터를 얻어 ptr에 대입했다.
이후 ptr은 크기 10의 정수형 배열이 된다.

사용이 끝난 후 GlobalUnlock과 GloblaFree를 사용해 메모리를 이동케하거나 해제한다.

만약, 고정된 메모리를 얻고 싶다면 다음과 같이 수정한다.

===============================================================

< 예제2 >

ptr = GlobalAlloc(GMEM_FIXED, sizeof(int) * 10);
for(i=0; i<10; i++){
	wsprintf(str, TEXT("%d"), ptr[i] = i*2);
	TextOut(hdc, 10, i*20, str, lstrlen(str));
}
GlobalFree(ptr);


GMEM_FIXED 플래그를 사용하면 포인터가 리턴되므로 곧바로 사용할 수 있다.

GlobalAlloc으로 할당한 메모리는 다음 함수로 크기를 변경해서 재할당할 수 있다.
===============================================================


> HGLOBAL GlobalReAlloc(HGLOBAL hMem, DWOD dwBytes, UINT uFlags);


Win16의 힙 함수는 호환성 유지를 위해 아직도 사용가능 하지만, 효율이 별로 좋지 못하므로 가급적이면 HeapAlloc 등의 Win32 함수를 사용하는 것이 좋다.

Win16의 힙 함수들은 Win32의 새로운 힙 함수들에 비해 속도도 느릴 뿐만 아니라 핸들 테이블이라는 추가적인 메모리를 소비해 비경제적이므로 사용하지 않는 것이 좋다.

하지만 기존 코드의 실행 보장과 프로그래머들의 습관 때문에 없앨 수는 없을 것이다.

아직까지도 클립보드나 DDE, 커스텀 리소스에는 이 함수들이 사용되고 있으며 그래서 이 함수의 플래그를 알아야 할 필요가 있다.

===============================================================

여기까지 메모리를 할당하는 여러 가지 방법에 대해 연구해봤는데 COM 라이브러리나 각 언어별 할당 방법까지 고려하면 엄청나게 많은 할당 방법이 존재한다.

이 중 우리가 직접 사용할만한 할당 방법은 역시 malloc과 new뿐이다.

단순 메모리이면 malloc을, 객체를 생성할 때는 new 연산자를 사용하는 것이 가장 간편하다.


어차피 이 함수들이 내부에서 힙 할당 함수를 호출하고 힙 관리자는 필요할 경우 가상 메모리 할당 함수를 호출할 것이다.

메모리를 관리하는 API 함수를 직접적으로 호출하는 것은 이식성에도 불리한데 malloc과 new는 UNIX나 리눅스에서도 잘 컴파일 된다.
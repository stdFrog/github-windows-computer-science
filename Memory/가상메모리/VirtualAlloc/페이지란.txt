Win32 프로세스가 가지는 4G의 가상 주소 공간은 "페이지"라는 단위로 구성된다.

한 페이지의 크기는 시스템마다 다른데 가장 많이 사용되는 인텔 계열의 CPU에서는 4K 바이트의 크기를 가진다.

윈도우즈는 페이지 단위로 주소 공간을 관리한다.

즉 할당하거나 해제하는 단위가 페이지 단위라는 뜻이다.

주소 공간을 구성하는 각 페이지는 다음 세 가지 상태 중 하나의 상태로 존재한다.


___________________________________________________________________________________________________
상태			설명
===============================================================
자유 영역(Free)		사용되지 않는 자유 영역이다. 언제든지 예약 또는 확정할 수 있다.

예약(Reserve)		장래의 사용을 위해 예약만 되어 있는 페이지이며 물리적인
			메모리가 할당되어 있지 않다.
			즉, 주소 공간만 할당되어 있는 상태이다.

확정(Committed)		가상 메모리와 연결되어 있는 상태이며 바로 사용할 수 있다.
			물리적인 메모리를 소모한다.
===============================================================


프로세스가 처음 실행되었을 때 대부분의 주소 공간은 자유 영역일 것이며 실행 파일의 이미지와 공유 DLL 등이 확정되어 사용될 것이다.

자유 영역으로 남아있는 주소 공간은 언제든지 할당해 사용할 수 있는데 할당의 수준이 예약과 확정 두 종류가 있다.

 예약이란 말 그대로 주소 공간만 할당하여 이 번지가 다른 목적으로 사용되지 않도록 하는 것이며 확정은 물리적인 메모리가 실제로 필요할 때 RAM 또는 페이징 파일을 주소 공간에 연결(Map)하는 것이다.




Win16에는 없던 이런 예약과 확정이라는 것이 왜 필요하게 되었는가 하면 물리적인 메모리와 논리적인 주소 공간이 분리되었기 때문이다.

논리적인 주소 공간을 할당하는 것이 예약이고 예약된 주소 공간에 물리적인 메모리를 연결하는 것이 확정이다.

주소 공간만을 할당하는 예약은 물리적인 메모리를 전혀 소모하지 않는다.
그래서 충분한 주소 공간을 미리 예약해 두어도 전혀 손해볼 것이 없다.

일단 예약된 주소 공간은 다른 할당 요청에 의해 다시 할다오디지 않으므로 필요할 때마다 물리적인 메모리를 확정해서 사용하면 된다.





그럼 구체적인 예를 들어보자.

어떤 프로그램에서 10M바이트의 연속적인 메모리가 필요하다고 하자.
그런데 당장은 이 메모리가 한꺼번에 사용되지 않지만 반드시 연속적인 메모리여야 한다면 일단 10M의 주소 공간을 예약해둔다.
예약만 했으므로 주소 공간만 할당되었을 뿐 물리적인 메모리를 전혀 소모하지 않았다.
그리고 필요할 때마다 원하는 위치의 주소 공간을 확정하여 물리적인 메모리와 연결하여 사용하면 된다.
주소 공간이 연속되어 있으므로 예약된 주소와 연결되는 물리 메모리의 번지가 반드시 연속되지 않아도 아무 문제가 없다.



메모리의 예약과 확정은 VirtualAlloc의 세 번째 인수에 지정하면 되는데 예약과 확정을 따로 하고 싶다면 두 번 호출하면 된다.



예약에 의해 주소 공간이 임의의 번지에 먼저 할당되고 확정에 의해 이 주소 공간이 가상 메모리에 맵(연결)된다. 예약만 하고 확정은 하지 않은 상태는 주소 공간만 할당되어 있고 물리적인 메모리와 맵되어 있지 않은 상태이기 때문에 실제 메모리 구실을 할 수 없다.

따라서 다음과 같은 코드는 Access Violation(액세스 위반) 예외를 발생시킨다.


> ptr = (int*)VirtualAlloc(NULL, sizoef(int)*10, MEM_RESERVE, PAGE_READWRITE);
> ptr[0] = 'S';
일단, 가상 메모리 함수가 malloc 함수에 비해 가지는 이점을 알아보자.
대표적으로 두 가지가 있다.

1. 메모리를 예약 상태로 할당할 수 있다.
예약이란 물리적인 메모리를 소비하지 않으면서 주소 공간만을 미리 할당해 놓는 방법이다.
이렇게 되면 필요할 때 언제든지 필요한 부분만을 확정해서 사용할 수 있으므로 realloc 횟수를 줄일 수 있다.

2. 할당한 메모리의 액세스 권한을 지정할 수 있다.
malloc으로 할당한 메모리는 언제나 읽기/쓰기가 가능하지만 가상 메모리 함수로 할당한 메모리는 읽기 전용, 액세스 금지 속성을 가질 수 있어 실수로 인한 데이터 파괴를 막을 수 있다.


이 외에도 여러 가지 차이가 있지만 대부분이 이 두 가지 차이점으로 인해 파생되는 차이점이다.



가상 메모리 할당 함수는 일단 다음 두 가지가 있다.

> LPVOID VirtualAlloc(LPVOID ipAddress, DWORD dwSize, DWORD flAllocationType, DWORD flProtect);

> BOOL VirtualFree(LPVOID lpAddress, DWORD dwSize, DWORD dwFreeType);

===============================================================

일단 VirtualAlloc에 대해 알아보자.


첫 번째 인수 lpAddress는 할당하고자 하는 메모리의 절대 번지를 지정하되 NULL이면 시스템이 알아서 할당 번지를 지정한다.

동적으로 메모리를 할당할 때 할당 위치는 별 의미가 없으므로 보통 NULL을 주되 예약된 페이지를 확정할 때는 예약되어 있는 번지를 지정해야 한다.

두 번째 인수 dwSize는 할당하고자 하는 메모리의 양을 바이트 단위로 지정한다.

세 번째 인수 flAllocationType은 할당 방법을 지정한다.

___________________________________________________________________________________________________
할당 방법			설명
===============================================================
> MEM_RESERVE		물리적인 메모리의 할당없이 주소 공간만을 예약한다.
> MEM_COMMIT		물리적인 메모리를 확정한다.
> MEM_TOPDOWN		가급적 높은 번지에 메모리를 할당한다. (NT이상에서만 가능)
===============================================================


네 번째 인수 flProtect는 할당한 페이지의 액세스 타입을 지정하며 보통 PAGE_READWRITE로 지정한다.

메모리 할당에 성공하면 할당된 메모리의 번지를 리턴하며 실패했을 경우 NULL을 리턴한다.

===============================================================

다음은 할당된 페이지를 해제하는 함수다.

VirtualFree의 첫 번째 인수 lpAddress는 해제하고자 하는 메모리의 선두 번지를 지정하며 두 번째 인수 dwSize는 해제하고자 하는 메모리의 크기를 지정한다.

세 번째 인수 dwFreeType은 다음 두 값중 하나이되 둘을 같이 쓸 수는 없고 반드시 따로 사용해야 한다.

만약 확정된 메모리를 해제하려면 확정 해제 후 예약 해제해야 한다.

___________________________________________________________________________________________________
값			설명
===============================================================
MEM_DECOMMIT		확정된 페이지를 확정 해제한다.
MEM_RELEASE		예약된 페이지를 예약 해제한다.
===============================================================





이제 예제를 보자.

다음은 가상 메모리 할당 함수를 사용하여 앞에서 만든 MemAlloc 예제를 다시 작성해본 것이다.
가상 메모리 함수를 사용하는 가장 간단한 예라고 할 수 있다.

ptr = (int*)VirtualAlloc(NULL, sizeof(int)*10, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
	wsprintf(str, TEXT("%d"), ptr[i] = i * 2);
	TextOut(hdc, 10, i*20, str, lstrlen(str));
}
VirtualFree(ptr, sizeof(int)*10,  MEM_DECOMMIT);
VirtualFree(ptr, 0, MEM_RELEASE);








VirtualAlloc으로 정수형 변수 10개분의 메모리를 읽기, 쓰기 가능하게 예약과 동시에 확정한다.
그리고 그 포인터를 ptr로 받아 사용하고 VirtualFree 함수로 확정 해제했다.

실행 결과는 앞에서 만든 예제와 완전히 동일하다.
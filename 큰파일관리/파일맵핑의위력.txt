파일 맵핑이 진정으로 위력을 발휘할 때는 엄청나게 큰 파일을 액세스할 때이다.
앞의 예제처럼 1K 정도밖에 안되는 파일은 메모리로 읽어들인 후 관리하는 것이 오히려 더 편리하다.
하지만 수십~수백 M에 달하는 파일을 액세스해야 한다면 통상적인 파일 액세스 함수들을 쓸 수 없다.

애초에 1기가의 메모리를 한꺼번에 할당할 수 있다면 아주 큰 시스템일 것이다.

이럴 때는 보통 약간의 메모리만 할당하여 파일의 일부분만 읽어서 사용하고 다른 부분이 필요하면 파일 포인터를 옮겨 가며 원하는 부분을 다시 액세스하는 방법을 사용한다.

메모리에 조그만 창을 만들고 이 창을 통해 파일의 필요한 부분만 가져오는 식이다.

예를 들어 500M쯤 되는 문서 파일을 화면에 출력해야 한다고 가정해보자.

파일 전체를 한꺼번에 화면에 출력할 필요는 없으므로 64K정도의 버퍼를 마련하고 한 페이지 분량 정도만 읽어서 출력하면 사용자가 이 문서의 앞 부분을 볼 수 있다.

첫 페이지를 출력해 놓은 상태에서 사용자가 PgDn이나 이동키로 문서의 아래쪽으로 이동하면 이동한만큼 파일 포인터를 옮겨 버퍼로 다시 읽어 들이면 된다.

파일이 아무리 커도 화면에 당장 표시할 수 있는 분량은 얼마되지 않기 때문에 작은 버퍼로도 전체 파일의 각 부분을 번갈아가며 출력할 수 있는 것이다.

물론 이 기술이 통하기 위해서는 사용자의 요구를 정확하게 파악하여 필요한 부분을 제때 읽어와야 하는데 이는 어렵다기 보다는 무척 성가신 일이다.

큰 파일을 액세스하는 이런 전통적인 방법은 과거 지원이 부족할 때 흔히 사용되었던 아주 상식적인 방법이다.

파일 맵핑을 사용하면 시스템이 필요한 부분을 선정하여 메모리로 올리는 작업을 대신하므로 훨씬 더 간단하게 구현할 수 있다.